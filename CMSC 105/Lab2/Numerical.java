import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.lang.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 006104
 */
public class Numerical extends javax.swing.JFrame {

    /**
     * Creates new form Numerical
     */
    //arraylists
    ArrayList<String> inputList = new ArrayList<>(); 
    ArrayList<String> dummy = new ArrayList<>(); 
    ArrayList<Double> clLowerList = new ArrayList<>();
    ArrayList<Double> clHigherList = new ArrayList<>();
    ArrayList<Double> middleList = new ArrayList<>();
    //Lists for collapse
    ArrayList freqList = new ArrayList<>();
    ArrayList percentList = new ArrayList<>();
    ArrayList cfList = new ArrayList<>();
    ArrayList cpList = new ArrayList<>();
    //defaultModel
    DefaultTableModel table;
    //doubles
    double k = 0, classWidth = 0, range = 0;     //all numeric values should be double for security purposes. ASIDES FREQUENCY
    //ints
    int addLock = 0, collapseUnlock = 0;                          
    //strings
    String title;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public Numerical() {
        initComponents();
        table = (DefaultTableModel) numericalTable.getModel();
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        numericalTable = new javax.swing.JTable();
        titleBox = new javax.swing.JTextField();
        inputBox = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        showGraph = new javax.swing.JButton();
        returnToMenu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        collapseLC = new javax.swing.JButton();
        collapseHC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        numericalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class Limt", "True Class Limit", "Middle", "Frequency", "Percentage", "CF", "CP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(numericalTable);

        titleBox.setEditable(false);
        titleBox.setFont(new java.awt.Font("SimSun-ExtB", 1, 18)); // NOI18N
        titleBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        titleBox.setText(" ");

        inputBox.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        inputBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputBox.setText(" ");

        add.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        add.setText(" Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        showGraph.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        showGraph.setText("ShowGraph");

        returnToMenu.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        returnToMenu.setText("ReturnToMenu");
        returnToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToMenuActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter all inputs at once.");

        jLabel2.setText("Title");

        collapseLC.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        collapseLC.setText("collapse lower class");
        collapseLC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseLCActionPerformed(evt);
            }
        });

        collapseHC.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        collapseHC.setText("collapse higher class");
        collapseHC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseHCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(266, 266, 266)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(154, 154, 154)
                                .addComponent(titleBox, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputBox)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(add)
                                            .addComponent(reset))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(collapseLC)
                                            .addComponent(collapseHC)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(showGraph)
                                        .addGap(18, 18, 18)
                                        .addComponent(returnToMenu)))
                                .addGap(30, 30, 30)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(titleBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                .addComponent(add)
                                .addGap(49, 49, 49))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(collapseHC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(collapseLC)
                                    .addComponent(reset))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showGraph)
                            .addComponent(returnToMenu))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     public void notifyError(String message){
        InputWarning warning = new InputWarning();
        warning.setVisible(true);
        warning.setMessage(message);  
        //table.removeRow(table.getRowCount() - 1 );
        
    }
    public boolean checkInputs(String inputs){
        try{
            double i = Double.parseDouble(inputs);
            return true;
        }catch(NumberFormatException e){
            return false;
        }
    }
    public void splitInputs(String inputs){
        boolean validity = true;
        String[] parts = inputs.split(" ");
        String error1 = "Please enter numbers";
        int ctr = 0;
        while(ctr != parts.length){
            if(parts[ctr].equals("")){// every first input, there's a space disturbing the strings. Move ctr to avoid this.
                ctr++;
            }
            validity = checkInputs(parts[ctr]);  System.out.println( "parts ["+ctr+"] "+parts[ctr]+" validity = "+validity);//testing 
            if(validity == false){
               inputList.clear();
               notifyError(error1);
               inputBox.setText("");
               break;
            }
            inputList.add(parts[ctr]);   //System.out.println(parts[ctr]);
            ctr++;
        }//inputBox.setText(parts.length+"");//this.ok
        dummy = inputList; // dummy is duplicate. dummy is for a special feature. dummy is for reusing previous inputs.
    }
    public void printArray(double[] array){
        for(int i = 0; i != array.length; i++){
            System.out.print(array[i]+" ");
        }
    }//testing testing
    public double[] insertionSort(double[] input){
        double temp = 0; 
        int ctr = 0;
        for(int i = 1; i < input.length;i++){
            for(int j = i; j != 0; j--){
                if(input[j] < input[j-1]){
                    temp = input[j];
                    input[j] = input[j-1];
                    input[j-1] = temp;
                }
            }
        } 
        return input;
    }
    public double findRange(double highest, double lowest){  
        return highest - lowest;
    }
    public double[] arrayInator(ArrayList input){
        double[] intArray = new double[input.size()];
        int ctr = 0;
        while(ctr != input.size()){
            intArray[ctr] = Double.parseDouble((String)input.get(ctr));
            ctr++;
        }
        return intArray;
    }
    public double findK(){                                  System.out.println("inputList.size() nga basehan for n"+inputList.size() );
        return Math.ceil(1+3.322*(Math.log10(inputList.size())));//inputList.size()));
    }
    public int findFrequency(double[] Array, double high, double low){
        int freq = 0;
        for(int i = 0; i != Array.length; i++){
            if(Array[i] >= low && Array[i] <= high)
                freq++;
        }
        return freq;
    }                                       
    public double getPercentage(double fullsize, double percentVal){
        double percentage = Math.ceil((100.0f/fullsize)*percentVal);// System.out.println("currentPercentage= "+percentage);
        return percentage;
    }
    public void createFrequencyDist(double[] sortedArray, double classWidth, double clNum){//involved: class Limit, trueclassLimit, middle, frequency,percentage cf , and cp.
       double ctr = sortedArray[0], clLower = 0, clHigher = 0,  rows = 0, middle = 0, percentage = 0, cp = 0; 
       int frequency = 0, cf = 0; // int kay tali raman
       String reciever, reciever2;
       while(rows != clNum){                       //(ctr + classWidth) != sortedArray[sortedArray.length - 1]){  
           clLower = ctr;
           if((rows + 1) == clNum){
               clHigher = sortedArray[sortedArray.length - 1]; //there are instances that the last class limit is greater than the input's largest value so.. in here, assign directly the largest input value to the last row in the class list. 
           }
           else{ 
               clHigher = (ctr + ((int)classWidth - 1));
           }
           middle = ((clHigher - clLower)/2)+clLower;          // the other  mid ...middle = ctr+(classWidth/2);
           frequency = findFrequency(sortedArray, clHigher, clLower);
           percentage = getPercentage(sortedArray.length, frequency);
           cf += frequency;
           cp += percentage;
           reciever = (int)clLower+ "-"+(int)clHigher;
           reciever2 = (clLower+0.5) +"-"+(clHigher+0.5);   //RECONSIDER THIS: THE LISTS CONTAINING THE TABLE'S DATA ARE NOT NEEDED!!!!!!!
           clLowerList.add(clLower);                                           System.out.print(reciever);
           clHigherList.add(clHigher);                                         System.out.println(" "+reciever2+" middle: "+middle+" frequency: "+frequency+" percentage: "+percentage+"%"+" cf: "+cf+" cp:"+cp);
           middleList.add(middle);
           freqList.add(frequency);
           percentList.add(percentage);
           cfList.add(cf);
           cpList.add(cp);
           table.insertRow(table.getRowCount(), new Object[]{reciever, reciever2,middle,frequency,percentage+" %",cf,cp+" %"});
           ctr += classWidth;
           rows++;
       } 
       table.insertRow(table.getRowCount(), new Object[]{"TOTAL","","",cf, cp+" %"," "," "});
       System.out.println("the last digit of cl: "+sortedArray[sortedArray.length - 1]);
           //naay problem: no. of class list should be equal to k. kulang og isa pirme. mostly ang last. check computeK, or this method. 
    }
    
    
    
    
    //temporary method
    public void printArrayList(ArrayList toBPrinted){
        int ctr = 0; 
        while(ctr != toBPrinted.size()){
            System.out.print(toBPrinted.get(ctr)+" ");
            ctr++;
        }
    }
   
    
    
    
    
    
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        
        if(addLock == 0){
            String input = inputBox.getText();                   System.out.println(input);
            //checkInputs(input);
            splitInputs(input);
            double[] intArray = arrayInator(inputList);             printArray(intArray);   System.out.print("unSorted --\nSorted");
            double[] sortedArray = insertionSort(intArray);         printArray(sortedArray);
            range = findRange(sortedArray[sortedArray.length-1], sortedArray[0]);      //inputBox.setText(range+""); //testing
            k = findK();           
            classWidth = Math.ceil(range/k);          //  inputBox.setText("range: "+range+" k: "+k+" classWidth: "+classWidth);
            createFrequencyDist(sortedArray, classWidth, k);
                                                                    printArrayList(clLowerList); System.out.println("");
                                                                    printArrayList(clHigherList);
        //better Idea: lock add after one press. unlocked when reset button is pressed. while locked(user cannot enter inputs) 
            addLock = 1;
            collapseUnlock = 1;
        }
    }//GEN-LAST:event_addActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        addLock = 0;
        inputList.clear();
        dummy.clear();
        middleList.clear();
        clLowerList.clear();
        clHigherList.clear();
        inputBox.setText("");
        cleanTable();
        collapseUnlock = 0;
    }//GEN-LAST:event_resetActionPerformed
    public void cleanTable(){
        int temp = table.getRowCount();
        int ctr = 0;   System.out.println("\n"+table.getRowCount());
            while(ctr != temp){
                table.removeRow(table.getRowCount()-1);
                ctr++;
            }
    }
    private void collapseLCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseLCActionPerformed
        int ctr = 0;
        String error1 = "Add inputs first.";
        String reciever;
        cleanTable(); 
        if(collapseUnlock == 0){
            notifyError(error1);
        }
        else{ 
            System.out.println("clHList: "+ clHigherList.size()+"ctr: "+ctr+"collapse Action.. clHigherList: "+ clHigherList.get(ctr));
            while(ctr != clHigherList.size()){
                reciever = "<= "+clHigherList.get(ctr);    
                table.insertRow(table.getRowCount(), new Object[]{reciever, "-","-",freqList.get(ctr),percentList.get(ctr)+" %",cfList.get(ctr),cpList.get(ctr)+" %"});
                ctr++;
            }
           //table.insertRow(table.getRowCount(), new Object[]{reciever, reciever2,middle,frequency,percentage+" %",cf,cp+" %"});
            
        }
    }//GEN-LAST:event_collapseLCActionPerformed

    private void collapseHCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseHCActionPerformed
        String error1 = "Add inputs first.";
        String reciever;
        int ctr = 0;  
        cleanTable();
        if(collapseUnlock == 0){
            notifyError(error1);
        }
        else{ 
            while(ctr != clLowerList.size()){
                reciever =">="+ clLowerList.get(ctr);
                table.insertRow(table.getRowCount(), new Object[]{reciever, "-","-",freqList.get(ctr),percentList.get(ctr)+" %",cfList.get(ctr),cpList.get(ctr)+" %"});
                ctr++;
            }
           //table.insertRow(table.getRowCount(), new Object[]{reciever, reciever2,middle,frequency,percentage+" %",cf,cp+" %"});            
        }
    }//GEN-LAST:event_collapseHCActionPerformed

    private void returnToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToMenuActionPerformed
        this.setVisible(false);
        TableForm tf = new TableForm();
        tf.setVisible(true);
    }//GEN-LAST:event_returnToMenuActionPerformed
    @Override
    public void setTitle(String title){
        titleBox.setText(title);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Numerical.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Numerical.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Numerical.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Numerical.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Numerical().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton collapseHC;
    private javax.swing.JButton collapseLC;
    private javax.swing.JTextField inputBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable numericalTable;
    private javax.swing.JButton reset;
    private javax.swing.JButton returnToMenu;
    private javax.swing.JButton showGraph;
    private javax.swing.JTextField titleBox;
    // End of variables declaration//GEN-END:variables
}
