/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.table.DefaultTableModel;
import java.util.*;
import java.lang.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
/**
 *
 * @author 006104
 */
public class OneWayTable extends javax.swing.JFrame {

    /**
     * Creates new form OneWayTable
     */
    ArrayList<String> numList = new ArrayList<>();
    ArrayList<String> categoryList = new ArrayList<>();
    ArrayList<String> percentageList = new ArrayList<>();
    Boolean inputIsString = false;
    Boolean error = false;
    Boolean returned = false;
    DefaultTableModel table;
    int sum = 0, ctr = 0,computeIsOn = 0;
    String title = "";
    public OneWayTable() {
        initComponents();
        table = (DefaultTableModel) categoricalTable.getModel();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableTitle = new javax.swing.JTextField();
        categoryName = new javax.swing.JTextField();
        noOfItems = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        realAdd = new javax.swing.JButton();
        realDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoricalTable = new javax.swing.JTable();
        compute = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        totalNoOfItems = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        percentTotal = new javax.swing.JTextField();
        showGraph = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableTitle.setEditable(false);
        tableTitle.setFont(new java.awt.Font("Vrinda", 1, 18)); // NOI18N
        tableTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tableTitle.setText(" ");

        categoryName.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        categoryName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        categoryName.setText(" ");

        noOfItems.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        noOfItems.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        noOfItems.setText(" ");
        noOfItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfItemsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        jLabel1.setText("No. of items");

        jLabel2.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        jLabel2.setText("Category Name");

        realAdd.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        realAdd.setText("Add");
        realAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realAddActionPerformed(evt);
            }
        });

        realDelete.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        realDelete.setText("Delete");
        realDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realDeleteActionPerformed(evt);
            }
        });

        categoricalTable.setFont(new java.awt.Font("Vrinda", 0, 14)); // NOI18N
        categoricalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category Name", "No. Of Items", "Percentage"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(categoricalTable);

        compute.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        compute.setText("Compute");
        compute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        returnButton.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Total No. of Items");

        totalNoOfItems.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        totalNoOfItems.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalNoOfItems.setText(" ");

        jLabel4.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Percent Total");

        percentTotal.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        percentTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        percentTotal.setText(" ");

        showGraph.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        showGraph.setText("Show Graph");
        showGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tableTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(categoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel3)
                        .addGap(30, 30, 30)
                        .addComponent(totalNoOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(percentTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(showGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(compute)
                        .addGap(18, 18, 18)
                        .addComponent(reset)
                        .addGap(18, 18, 18)
                        .addComponent(returnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(realAdd)
                        .addGap(18, 18, 18)
                        .addComponent(realDelete)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(tableTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compute)
                    .addComponent(reset)
                    .addComponent(returnButton)
                    .addComponent(realDelete)
                    .addComponent(realAdd))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(totalNoOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(percentTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showGraph))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void noOfItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfItemsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfItemsActionPerformed
    @Override 
    public void setTitle(String x){
     this.title = x;
     System.out.println(title);
     tableTitle.setText(title);
    }
    @Override
    public String getTitle(){
        return title;
    }
    public double computeTotal(ArrayList list){
        double sum = 0, num = 0;
        Iterator<String> moove = list.iterator();
        while(moove.hasNext()){
            num = Double.parseDouble(moove.next());
            sum += num;
        }
        return sum;
    }
    public void notifyError(String message){
        InputWarning warning = new InputWarning();
        warning.setVisible(true);
        warning.setMessage(message);  
        //table.removeRow(table.getRowCount() - 1 );
        error = true;
    }
 
    public boolean checkString(String input){
        boolean isLetter = true;
        for(int i = 0; i != input.length(); i++)
            if(input.charAt(i) >= '1' && input.charAt(i) <= '9')
                isLetter = false;
        return isLetter;
    }
    public boolean checkNum(String input){ 
       try{
        double d = Double.parseDouble(input);
       }
        catch(NumberFormatException nfe){
        return false;
        }
        return true;                                          
    }
    public void verifyNoOfItems(String input){
        String error1 = "Must enter numbers in NoOfInput";
        boolean validity = true;
        validity = checkNum(input);          
        if(validity == true)
            System.out.println("NoOfItems input is a number... "+validity);
        else{
            notifyError(error1);
        }
    }
    public void verifyCategoryName(String input){
        String error1 = "Be consistent with inputs";
        boolean validity = checkString(input);
        if(validity == inputIsString)
            System.out.println("categoryName is valid.");
        else
            notifyError(error1);
    }
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
       
    }//GEN-LAST:event_addActionPerformed
    private void realDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realDeleteActionPerformed
        if(table.getRowCount() > 0 && computeIsOn == 0){
        table.removeRow(table.getRowCount() - 1);
        numList.remove(numList.size() - 1);
        categoryList.remove(categoryList.size() - 1);               
        totalNoOfItems.setText(computeTotal(numList)+"");
        }
    }//GEN-LAST:event_realDeleteActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
    }//GEN-LAST:event_jButton2ActionPerformed
    public void emptyTable(){
        int ctr = 0;
        while(ctr != table.getRowCount()){
            table.removeRow(table.getRowCount() -1 );
        }
    }
    private void realAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realAddActionPerformed
        if(computeIsOn == 0){
            String cN = categoryName.getText();
            String nItems = noOfItems.getText();    System.out.println("nItems==   "+nItems+"cN===    "+cN);
            verifyNoOfItems(nItems);
            if(ctr == 0 ){
                inputIsString = checkString(cN);  System.out.println("inputIsString..."+inputIsString); 
                if(checkNum(nItems)== true) 
                    ctr++;                
                System.out.println("ctr ni ...  "+ctr); 
            }
            else{
                verifyCategoryName(cN);}
            
            if(error == false && checkNum(nItems) == true){
                table.insertRow(table.getRowCount(), new Object[]{cN, nItems});
                numList.add(nItems);
                categoryList.add(cN);
            }
            totalNoOfItems.setText(computeTotal(numList)+""); 
            error = false;}
    }//GEN-LAST:event_realAddActionPerformed
    public double getPercentage(double size, double percentVal){
        //double percentage = Math.ceil((100.0f/size)*percentVal); System.out.println("currentPercentage= "+percentage);
        return ((100.0f/size)*percentVal);
    }  
    private void computeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeActionPerformed
        computeIsOn = 1;
        emptyTable();                                       
        double currentNum = 0;
        double currentPercentage = 0;
        double total = computeTotal(numList);    System.out.println("TEST TOTAL : " +total); 
        String output = "";
        Iterator<String> iterateNumList = numList.iterator();
        Iterator<String> iterateCN = categoryList.iterator(); 
        while (iterateNumList.hasNext() && iterateCN.hasNext()){  // iterating the two ArrayLists at once--significant in inserting rows because the two are needed as parameters.
            currentNum = Double.parseDouble(iterateNumList.next()); //parsing the String to get the double value
            currentPercentage = getPercentage(total, currentNum);   // get percentage of currentNum out of the total
            output = String.format("%.2f",currentPercentage)+"%"; // assigning it to string in order to add "%" for decoration purposes only
            percentageList.add(output);
            table.insertRow(table.getRowCount(), new Object[]{ iterateCN.next(), currentNum, output}); //this inserts table with Category, noInputs, and frequency in percentage.
        }
        percentTotal.setText("100%");
    }//GEN-LAST:event_computeActionPerformed
    public void clearList(ArrayList list){
        list.clear();
    }
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        emptyTable();
        computeIsOn = 0;
        ctr = 0;
        clearList(numList);
        clearList(categoryList);
    }//GEN-LAST:event_resetActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        returned = true;
        this.setVisible(false);
        TableForm tf = new TableForm();
        tf.setVisible(true);
    }//GEN-LAST:event_returnButtonActionPerformed
    public double parseString(String datum){
        return Double.parseDouble(datum);
    }
    private void showGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGraphActionPerformed
       //pieChart
       int ctr = 0;
       DefaultPieDataset pieDataset = new DefaultPieDataset();
       while(ctr != categoryList.size()){
            pieDataset.setValue(categoryList.get(ctr)+" "+percentageList.get(ctr) , new Double(parseString(numList.get(ctr))));
            ctr++;
       }
       JFreeChart chart = ChartFactory.createPieChart(title, pieDataset,true,true,true);
       PiePlot figure = (PiePlot)chart.getPlot();
       //figure.setForegroundAlpha(TOP_ALIGNMENT);
       ChartFrame frame = new ChartFrame(title, chart);
       if(returned == true){
           frame.setVisible(false);
       }
       else{
           frame.setVisible(true);
       }
           frame.setSize(500, 700);
    }//GEN-LAST:event_showGraphActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OneWayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OneWayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OneWayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OneWayTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OneWayTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable categoricalTable;
    private javax.swing.JTextField categoryName;
    private javax.swing.JButton compute;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField noOfItems;
    private javax.swing.JTextField percentTotal;
    private javax.swing.JButton realAdd;
    private javax.swing.JButton realDelete;
    private javax.swing.JButton reset;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton showGraph;
    private javax.swing.JTextField tableTitle;
    private javax.swing.JTextField totalNoOfItems;
    // End of variables declaration//GEN-END:variables
}
